generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") // uses connection pooling
}

model User {
  id        String    @id @default(uuid())
  email     String?   @unique
  studentID String?   @unique
  password  String
  sessions  Session[]

  Role Role @default(STUDENT)

  Student       Student?
  Faculty       Faculty?
  Administrator Administrator?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum Role {
  ADMINISTRATOR
  FACULTY
  STUDENT
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Administrator {
  id        String  @id @default(uuid())
  avatarUrl String?
  adminID   String  @unique
  fullname  String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Student {
  id         String           @id @default(uuid())
  studentID  String           @unique
  firstname  String
  lastname   String
  middlename String?
  email      String?          @unique
  gender     String
  yearlevel  String
  contact_no String?
  status     EvaluationStatus @default(PENDING)
  avatarUrl  String?
  birthdate  String?

  streetAddress  String
  barangay       String
  city           String
  state_province String
  postal_code    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseID String
  course   Course @relation(fields: [courseID], references: [id])

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id])

  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
}

enum EvaluationStatus {
  PENDING
  COMPLETED
  FAILED
}

model Faculty {
  id        String  @id @default(uuid())
  avatarUrl String?
  facultyID String  @unique
  fullname  String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Course {
  id           String     @id @default(uuid())
  courseName   String
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  Student      Student[]
}

model Department {
  id                    String    @id @default(uuid())
  departmentName        String
  departmentDescription String?
  Student               Student[]
  Section               Section[]
  Course                Course[]
}

model Subject {
  id           String  @id @default(uuid())
  subject_code String?
  subjectName  String
}

model Section {
  id          String    @id @default(uuid())
  sectionName String    @unique
  yearLevelId String
  yearLevel   YearLevel @relation(fields: [yearLevelId], references: [id])

  Department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  Student Student[]
}

model YearLevel {
  id       String    @id @default(uuid())
  yearName String
  Section  Section[]
}

model AcademicYear {
  id        String   @id @default(uuid())
  semester  String
  year      String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  questions Question[]

  @@map("categories")
}

model Question {
  id            String        @id @default(cuid())
  question      String
  description   String?
  required      Boolean       @default(true)
  allowComments Boolean       @default(false)
  categoryId    String
  category      Category      @relation(fields: [categoryId], references: [id])
  ratingScale   RatingScale[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("questions")
}

model RatingScale {
  id          String   @id @default(cuid())
  rating      Int
  description String
  questionId  String
  question    Question @relation(fields: [questionId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([questionId, rating])
  @@map("rating_scales")
}
