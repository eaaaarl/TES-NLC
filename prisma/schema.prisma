generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String    @id @default(uuid())
  email     String?   @unique
  studentID String?   @unique
  password  String
  sessions  Session[]

  Role Role @default(STUDENT)

  Student       Student?
  Faculty       Faculty?
  Administrator Administrator?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum Role {
  ADMINISTRATOR
  FACULTY
  STUDENT
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Administrator {
  id        String  @id @default(uuid())
  avatarUrl String?
  adminID   String  @unique
  fullname  String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Student {
  id         String           @id @default(uuid())
  studentID  String           @unique
  firstname  String
  lastname   String
  middlename String?
  email      String?          @unique
  gender     String
  yearlevel  String
  contact_no String?
  status     EvaluationStatus @default(PENDING)
  avatarUrl  String?
  birthdate  String?

  streetAddress  String
  barangay       String
  city           String
  state_province String
  postal_code    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseID String
  course   Course @relation(fields: [courseID], references: [course_id])
}

enum EvaluationStatus {
  PENDING
  COMPLETED
  FAILED
}

model Faculty {
  id        String  @id @default(uuid())
  avatarUrl String?
  facultyID String  @unique
  fullname  String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Course {
  course_id  String    @id @default(uuid())
  courseName String
  courseDep  String?
  Student    Student[]
}

model Subject {
  subject_id  String @id @default(uuid())
  subjectName String
}

model Section {
  section_id  String @id @default(uuid())
  sectionName String
}
