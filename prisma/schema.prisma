
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  url = env("POSTGRES_PRISMA_URL") // uses connection pooling

  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id       String    @id @default(uuid())
  email    String?   @unique
  password String
  sessions Session[]

  Role Role @default(STUDENT)

  Student       Student?
  Faculty       Faculty?
  Administrator Administrator?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum Role {
  ADMINISTRATOR
  FACULTY
  STUDENT
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Administrator {
  id        String  @id @default(uuid())
  avatarUrl String?
  adminID   String  @unique
  fullname  String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Student {
  id        String  @id @default(uuid())
  avatarUrl String?
  studentID String  @unique
  fullname  String
  status    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  subjectID String  @unique
  subject   Subject @relation(fields: [subjectID], references: [subject_id])

  courseID String @unique
  course   Course @relation(fields: [courseID], references: [course_id])
}

model Faculty {
  id        String  @id @default(uuid())
  avatarUrl String?
  facultyID String  @unique
  fullname  String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Course {
  course_id  String   @id @default(uuid())
  courseName String
  Student    Student?
}

model Subject {
  subject_id  String   @id @default(uuid())
  subjectName String
  Student     Student?
}
