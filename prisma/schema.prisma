generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") // uses connection pooling
}

model RegistrationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  used      Boolean  @default(false)
  role      Role
  expiresAt DateTime
  createdAt DateTime @default(now())
  createdBy String
}

model User {
  id        String    @id @default(uuid())
  email     String?   @unique
  studentID String?   @unique
  password  String
  sessions  Session[]

  Role Role @default(STUDENT)

  Student       Student?
  Faculty       Faculty?
  Administrator Administrator?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum Role {
  ADMINISTRATOR
  FACULTY
  STUDENT
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Administrator {
  id        String  @id @default(uuid())
  avatarUrl String?
  adminID   String  @unique
  fullname  String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Student {
  id         String           @id @default(uuid())
  studentID  String           @unique
  firstname  String
  lastname   String
  middlename String?
  email      String?          @unique
  gender     String
  contact_no String?
  status     EvaluationStatus @default(PENDING)
  avatarUrl  String?
  birthdate  String?

  streetAddress  String
  barangay       String
  city           String
  state_province String
  postal_code    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseID String
  course   Course @relation(fields: [courseID], references: [id])

  sectionId String?
  section   Section? @relation(fields: [sectionId], references: [id])

  yearLevelId String?
  yearLevel   YearLevel? @relation(fields: [yearLevelId], references: [id])

  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])

  StudentSubjectAssign StudentSubjectAssign[]
  Evaluation           Evaluation[]
}

enum EvaluationStatus {
  PENDING
  COMPLETED
  FAILED
}

model Course {
  id           String     @id @default(uuid())
  courseName   String
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  Student      Student[]
}

model Department {
  id                    String    @id @default(uuid())
  departmentName        String
  departmentDescription String?
  Student               Student[]
  Section               Section[]
  Course                Course[]
  Faculty               Faculty[]
  Subject               Subject[]
}

model Subject {
  id           String     @id @default(uuid())
  subject_code String?
  subjectName  String
  yearLevelId  String
  yearLevel    YearLevel  @relation(fields: [yearLevelId], references: [id])
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])

  StudentSubjectAssign StudentSubjectAssign[]
  Evaluation           Evaluation[]
  FacultySubjectAssign FacultySubjectAssign[]
}

model Section {
  id          String @id @default(uuid())
  sectionName String @unique

  yearLevelId  String
  yearLevel    YearLevel  @relation(fields: [yearLevelId], references: [id])
  departmentId String
  Department   Department @relation(fields: [departmentId], references: [id])

  Student Student[]
}

model YearLevel {
  id       String    @id @default(uuid())
  yearName String
  Section  Section[]
  Student  Student[]
  Subject  Subject[]
}

model AcademicYear {
  id        String   @id @default(uuid())
  semester  String
  year      String
  isActive  Boolean  @default(false)
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  FacultySubjectAssign FacultySubjectAssign[]
  Evaluation           Evaluation[]
  FacultyEvaluation    FacultyEvaluation[]
  StudentSubjectAssign StudentSubjectAssign[]
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  questions Question[]

  @@map("categories")
}

model Question {
  id            String        @id @default(uuid())
  question      String
  description   String?
  required      Boolean       @default(true)
  allowComments Boolean       @default(false)
  categoryId    String
  category      Category      @relation(fields: [categoryId], references: [id])
  ratingScale   RatingScale[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("questions")
}

model RatingScale {
  id          String   @id @default(uuid())
  rating      Int
  description String
  questionId  String
  question    Question @relation(fields: [questionId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([questionId, rating])
  @@map("rating_scales")
}

model StudentSubjectAssign {
  id             String       @id @default(uuid())
  studentId      String
  student        Student      @relation(fields: [studentId], references: [id])
  subjectId      String
  subject        Subject      @relation(fields: [subjectId], references: [id])
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  status         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, subjectId, academicYearId])
}

model Evaluation {
  id        String   @id @default(uuid())
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  facultyId String
  faculty   Faculty  @relation(fields: [facultyId], references: [id])
  responses Json
  status    String   @default("pending")
  deadline  DateTime

  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, subjectId, facultyId, academicYearId])
}

model Faculty {
  id                String  @id @default(uuid())
  avatarUrl         String?
  facultyID         String  @unique
  firstname         String
  middlename        String?
  lastname          String
  profileVisibility Boolean @default(true)
  phoneNumber       String?
  position          String?

  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  FacultySubjectAssign FacultySubjectAssign[]
  Evaluation           Evaluation[]
  FacultyEvaluation    FacultyEvaluation[]
}

model FacultySubjectAssign {
  id             String       @id @default(uuid())
  facultyId      String
  faculty        Faculty      @relation(fields: [facultyId], references: [id])
  subjectId      String
  subject        Subject      @relation(fields: [subjectId], references: [id])
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([facultyId, subjectId, academicYearId])
}

model FacultyEvaluation {
  id               String       @id @default(uuid())
  facultyId        String
  faculty          Faculty      @relation(fields: [facultyId], references: [id])
  academicYearId   String
  academicYear     AcademicYear @relation(fields: [academicYearId], references: [id])
  categoryRatings  Json
  overallRating    Float
  totalEvaluations Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([facultyId, academicYearId])
}
